// Abstract Category class (can be extended by different product categories)
abstract class Category {
    private String name;

    public Category(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Specific categories for Book, Clothing, and Gadget
class BookCategory extends Category {
    public BookCategory(String name) {
        super(name);
    }
}

class ClothingCategory extends Category {
    public ClothingCategory(String name) {
        super(name);
    }
}

class GadgetCategory extends Category {
    public GadgetCategory(String name) {
        super(name);
    }
}

// Generic Product class with bounded type parameter T that extends Category
class Product<T extends Category> {
    private String name;
    private double price;
    private T category;

    public Product(String name, double price, T category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public T getCategory() {
        return category;
    }

    public void applyDiscount(double percentage) {
        this.price -= this.price * percentage / 100;
    }

    @Override
    public String toString() {
        return "Product: " + name + ", Price: " + price + ", Category: " + category.getName();
    }
}

// Marketplace class to manage products and apply discounts
public class MarketPlace {

    // Generic method to apply a discount to any product
    public static <T extends Product<?>> void applyDiscount(T product, double percentage) {
        product.applyDiscount(percentage);
        System.out.println("Discount applied! Updated price: " + product.getPrice());
    }

    // Display product catalog
    public static void displayCatalog(java.util.List<Product<?>> catalog) {
        for (Product<?> product : catalog) {
            System.out.println(product);
        }
    }

    // Add product to catalog
    public static void addProductToCatalog(java.util.List<Product<?>> catalog, Product<?> product) {
        catalog.add(product);
    }

    public static void main(String[] args) {
        // Create a list to hold products
        java.util.List<Product<?>> productCatalog = new java.util.ArrayList<>();

        // Create categories for each type of product
        BookCategory fictionCategory = new BookCategory("Fiction");
        ClothingCategory menClothingCategory = new ClothingCategory("Men");
        GadgetCategory mobileCategory = new GadgetCategory("Mobile");

        // Create products
        Product<BookCategory> book = new Product<>("Java Programming", 50.0, fictionCategory);
        Product<ClothingCategory> clothing = new Product<>("T-shirt", 20.0, menClothingCategory);
        Product<GadgetCategory> gadget = new Product<>("Smartphone", 300.0, mobileCategory);

        // Add products to catalog
        addProductToCatalog(productCatalog, book);
        addProductToCatalog(productCatalog, clothing);
        addProductToCatalog(productCatalog, gadget);

        // Display the catalog before applying discounts
        System.out.println("Product Catalog:");
        displayCatalog(productCatalog);

        // Apply discounts
        System.out.println("\nApplying discounts...");
        applyDiscount(book, 10);  // 10% discount on book
        applyDiscount(clothing, 20);  // 20% discount on clothing
        applyDiscount(gadget, 15);  // 15% discount on gadget

        // Display the catalog after applying discounts
        System.out.println("\nUpdated Product Catalog:");
        displayCatalog(productCatalog);
    }
}
